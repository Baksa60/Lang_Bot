import logging
import sqlite3
import time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from googletrans import Translator, LANGUAGES
import asyncio
import os
from dotenv import load_dotenv

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")

DEFAULT_LANG = "en"       # –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MAX_RETRIES = 3           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
CACHE_SIZE = 100          # –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê =====
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ü–ï–†–ï–í–û–î–ß–ò–ö–ê =====
translator = Translator(service_urls=[
    'translate.google.com',
    'translate.google.ru',
    'translate.google.cn'
])

# ===== –ö–≠–® –ü–ï–†–ï–í–û–î–û–í =====
translation_cache = {}
cache_keys = []

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
def init_db():
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            lang TEXT DEFAULT 'en'
        )
    """)
    conn.commit()
    conn.close()

def get_user_lang(user_id):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("SELECT lang FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result[0] if result else DEFAULT_LANG

def set_user_lang(user_id, lang):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    cursor.execute("""
        INSERT OR REPLACE INTO users (user_id, lang) 
        VALUES (?, ?)
    """, (user_id, lang))
    conn.commit()
    conn.close()

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–ê =====
def language_keyboard():
    buttons = [
        InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en"),
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="üá™üá∏ Espa√±ol", callback_data="lang_es"),
        InlineKeyboardButton(text="üá´üá∑ Fran√ßais", callback_data="lang_fr"),
        InlineKeyboardButton(text="üá©üá™ Deutsch", callback_data="lang_de"),
    ]
    return InlineKeyboardMarkup(inline_keyboard=[buttons])

# ===== –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–í–û–î–ê =====
def add_to_cache(text, dest, result):
    if len(cache_keys) >= CACHE_SIZE:
        del translation_cache[cache_keys.pop(0)]
    key = (text[:50], dest)  # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª—é—á–∞
    translation_cache[key] = result
    cache_keys.append(key)

async def safe_translate(text, dest):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    cache_key = (text[:50], dest)
    if cache_key in translation_cache:
        return translation_cache[cache_key]
    
    # –ü—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    for attempt in range(MAX_RETRIES):
        try:
            result = translator.translate(text, dest=dest)
            add_to_cache(text, dest, result)
            return result
        except Exception as e:
            logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
            if attempt < MAX_RETRIES - 1:
                await asyncio.sleep(1)
    
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =====
@dp.message(Command("start", "help"))
async def send_welcome(message: types.Message):
    user_lang = get_user_lang(message.from_user.id)
    lang_name = LANGUAGES.get(user_lang, user_lang).capitalize()
    
    text = (
        f"ü§ñ <b>–Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫!</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫.\n"
        f"–¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞: <b>{lang_name}</b>\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —Å–º–µ–Ω—ã —è–∑—ã–∫–∞."
    )
    await message.answer(text, reply_markup=language_keyboard())

@dp.message(Command("lang"))
async def show_languages(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=language_keyboard())

@dp.message()
async def handle_text(message: types.Message):
    try:
        user_lang = get_user_lang(message.from_user.id)
        text = message.text.strip()
        
        if not text:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
            return
            
        try:
            start_time = time.time()
            translated = await safe_translate(text, user_lang)
            trans_time = time.time() - start_time
            
            response = (
                f"üåç <b>–û—Ä–∏–≥–∏–Ω–∞–ª</b>:\n{text}\n\n"
                f"üîÅ <b>–ü–µ—Ä–µ–≤–æ–¥</b> ({LANGUAGES.get(user_lang, user_lang).capitalize()}):\n"
                f"{translated.text}\n\n"
                f"‚è± <i>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ {trans_time:.1f} —Å–µ–∫</i>"
            )
            await message.answer(response, reply_markup=language_keyboard())
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            await message.answer(
                "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "- –°–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç\n"
                "- –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n"
                "- –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ (/lang)",
                reply_markup=language_keyboard()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda call: call.data.startswith("lang_"))
async def change_language(call: types.CallbackQuery):
    try:
        lang_code = call.data.split("_")[1]
        lang_name = LANGUAGES.get(lang_code, lang_code).capitalize()
        
        set_user_lang(call.from_user.id, lang_code)
        await call.answer(f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {lang_name}", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await call.message.edit_text(
            f"–Ø–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{lang_name}</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
            reply_markup=language_keyboard()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞: {e}")
        await call.answer("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞", show_alert=True)

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    init_db()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())